# Taskfile.yml
version: '3'

vars:
  BINARY_NAME: ckeletin-go
  MODULE_PATH: github.com/peiman/ckeletin-go
  VERSION:
    sh: git describe --tags --always --dirty
  COMMIT:
    sh: git rev-parse HEAD
  DATE:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'
  LDFLAGS: >-
    -ldflags="
    -X '{{.MODULE_PATH}}/cmd.binaryName={{.BINARY_NAME}}'
    -X '{{.MODULE_PATH}}/cmd.Version={{.VERSION}}'
    -X '{{.MODULE_PATH}}/cmd.Commit={{.COMMIT}}'
    -X '{{.MODULE_PATH}}/cmd.Date={{.DATE}}'
    "

tasks:
  default:
    cmds:
      - task --list
    silent: true

  setup:
    desc: Install development tools
    cmds:
    - go install golang.org/x/tools/cmd/goimports@latest
    - go install golang.org/x/vuln/cmd/govulncheck@latest
    - go install gotest.tools/gotestsum@latest
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    - go install github.com/evilmartians/lefthook@latest
    - go install github.com/psampaz/go-mod-outdated@latest
    - lefthook install
    silent: true

  tidy:
    desc: Ensure go.mod and go.sum are up to date
    cmds:
      - go mod tidy

  deps:verify:
    desc: Verify that dependencies haven't been modified
    cmds:
      - go mod verify
    silent: true

  deps:outdated:
    desc: Check for outdated dependencies
    cmds:
      - echo "Checking for outdated dependencies..."
      - go list -u -m -json all | go-mod-outdated -update -direct
    silent: true

  deps:check:
    desc: Run all dependency checks
    cmds:
      - task: deps:verify
      - task: deps:outdated
      - task: vuln
    silent: true

  format:
    desc: Format code
    cmds:
      - goimports -w .
      - gofmt -s -w .

  lint:
    desc: Run all linters
    cmds:
      - go vet ./...
      - golangci-lint run

  vuln:
    desc: Check for vulnerabilities
    cmds:
      - govulncheck ./...

  check-defaults:
    desc: Check for unauthorized viper.SetDefault() calls
    cmds:
      - ./scripts/check-defaults.sh
    silent: false

  validate-config-patterns:
    desc: Validate configuration pattern compliance (ckeletin-go best practices)
    cmds:
      - ./scripts/validate-configuration-patterns.sh

  test:
    desc: Run tests with coverage
    cmd: |
      gotestsum --format pkgname --jsonfile test-output.json --hide-summary=skipped -- -v -coverprofile=coverage.txt -covermode=atomic ./...

  test:race:
    desc: Run tests with race detection
    cmd: |
      gotestsum --format standard-verbose --jsonfile test-output.json -- -v -race ./...

  test:watch:
    desc: Run tests in watch mode
    cmd: |
      gotestsum --format pkgname --watch --hide-summary=skipped

  test:coverage-text:
    desc: Run tests with detailed coverage data and display uncovered parts in the terminal
    cmds:
      - gotestsum --format pkgname --jsonfile test-output.json --hide-summary=skipped -- -cover -coverprofile=coverage.txt -covermode=atomic ./...
      - echo "Detailed coverage report:"
      - go tool cover -func=coverage.txt
    silent: false

  test:coverage-html:
    desc: Generate HTML coverage report and open in browser
    cmds:
      - task: test
      - go tool cover -html=coverage.txt -o coverage.html
      - echo "Coverage report saved to coverage.html"
      - '{{if eq OS "darwin"}}open{{else if eq OS "windows"}}start{{else}}xdg-open{{end}} coverage.html'
    silent: true

  docs:config:
    desc: Generate configuration documentation
    cmds:
      - echo "Generating configuration documentation..."
      - mkdir -p docs
      - ./{{.BINARY_NAME}} docs config --output=docs/configuration.md
      - echo "Configuration documentation saved to docs/configuration.md"
    deps: [build]

  docs:config-yaml:
    desc: Generate YAML configuration template
    cmds:
      - echo "Generating YAML configuration template..."
      - mkdir -p docs
      - ./{{.BINARY_NAME}} docs config --format=yaml --output=docs/config-template.yaml
      - echo "YAML template saved to docs/config-template.yaml"
    deps: [build]

  docs:
    desc: Generate all documentation
    cmds:
      - task: docs:config
      - task: docs:config-yaml
    silent: true

  check-validation:
    desc: Run validation checks (runs after formatting)
    deps:
      - lint
      - check-defaults
      - validate-config-patterns
      - deps:check
      - test

  check:
    desc: Run all quality checks
    cmds:
      - task: format
      - task: check-validation

  build:
    desc: Build the binary
    cmds:
      - go build {{.LDFLAGS}} -o {{.BINARY_NAME}} main.go

  run:
    desc: Run the application
    deps: [build]
    cmds:
      - ./{{.BINARY_NAME}}

  install:
    desc: Install the application
    cmds:
      - go install {{.LDFLAGS}} ./...

  clean:
    desc: Clean build artifacts
    cmds:
      - go clean
      - rm -f {{.BINARY_NAME}} coverage.txt test-output.json coverage.html
