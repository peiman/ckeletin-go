# Taskfile.yml
version: '3'

vars:
  BINARY_NAME: ckeletin-go
  MODULE_PATH:
    sh: go list -m
  VERSION:
    sh: git describe --tags --always --dirty
  COMMIT:
    sh: git rev-parse HEAD
  DATE:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'
  LDFLAGS: >-
    -ldflags="
    -X '{{.MODULE_PATH}}/cmd.binaryName={{.BINARY_NAME}}'
    -X '{{.MODULE_PATH}}/cmd.Version={{.VERSION}}'
    -X '{{.MODULE_PATH}}/cmd.Commit={{.COMMIT}}'
    -X '{{.MODULE_PATH}}/cmd.Date={{.DATE}}'
    "

tasks:
  default:
    cmds:
      - task --list
    silent: true

  setup:
    desc: Install development tools
    cmds:
    - go install golang.org/x/tools/cmd/goimports@latest
    - go install golang.org/x/vuln/cmd/govulncheck@latest
    - go install gotest.tools/gotestsum@latest
    - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
    - go install github.com/evilmartians/lefthook@latest
    - go install github.com/psampaz/go-mod-outdated@latest
    - lefthook install
    silent: true

  doctor:
    desc: Check development environment and tool installation
    cmds:
      - |
        echo "üîç Checking development environment..."
        echo ""

        # Go version
        echo "Go:"
        go version || echo "  ‚ùå Go not found"
        echo ""

        # Task version
        echo "Task:"
        task --version || echo "  ‚ùå Task not found"
        echo ""

        # Development tools
        echo "Development Tools:"

        echo "  goimports:"
        which goimports > /dev/null && goimports --help > /dev/null 2>&1 && echo "    ‚úÖ installed" || echo "    ‚ùå not found (run: task setup)"

        echo "  golangci-lint:"
        which golangci-lint > /dev/null && golangci-lint version > /dev/null 2>&1 && echo "    ‚úÖ installed" || echo "    ‚ùå not found (run: task setup)"

        echo "  gotestsum:"
        which gotestsum > /dev/null && echo "    ‚úÖ installed" || echo "    ‚ùå not found (run: task setup)"

        echo "  govulncheck:"
        which govulncheck > /dev/null && echo "    ‚úÖ installed" || echo "    ‚ùå not found (run: task setup)"

        echo "  lefthook:"
        which lefthook > /dev/null && lefthook version > /dev/null 2>&1 && echo "    ‚úÖ installed" || echo "    ‚ùå not found (run: task setup)"

        echo "  go-mod-outdated:"
        which go-mod-outdated > /dev/null && echo "    ‚úÖ installed" || echo "    ‚ùå not found (run: task setup)"

        echo ""
        echo "üí° If any tools are missing, run: task setup"

  tidy:
    desc: Ensure go.mod and go.sum are up to date
    cmds:
      - go mod tidy

  check:deps:verify:
    desc: Verify that dependencies haven't been modified
    cmds:
      - go mod verify
    silent: true

  check:deps:outdated:
    desc: Check for outdated dependencies
    cmds:
      - echo "Checking for outdated dependencies..."
      - go list -u -m -json all | go-mod-outdated -update -direct
    silent: true

  check:deps:
    desc: Run all dependency checks
    cmds:
      - task: check:deps:verify
      - task: check:deps:outdated
      - task: check:vuln
    silent: true

  format:
    desc: Format all Go code
    cmds:
      - ./scripts/format-go.sh fix

  format:staged:
    desc: Format specific files (for pre-commit hooks)
    cmds:
      - ./scripts/format-go.sh fix {{.CLI_ARGS}}

  check:format:
    desc: Check if Go code is formatted (CI mode)
    cmds:
      - ./scripts/format-go.sh check

  check:vuln:
    desc: Check for vulnerabilities
    cmds:
      - govulncheck ./...

  lint:
    desc: Run all linters
    cmds:
      - go vet ./...
      - golangci-lint run

  validate:defaults:
    desc: Validate no unauthorized viper.SetDefault() calls (enforces ADR-002)
    cmds:
      - ./scripts/check-defaults.sh
    silent: false

  validate:commands:
    desc: Validate command files follow ultra-thin patterns (enforces ADR-001)
    cmds:
      - ./scripts/validate-command-patterns.sh
    silent: false

  validate:constants:
    desc: Validate config constants are in sync with registry (enforces ADR-005)
    cmds:
      - ./scripts/check-constants.sh
    silent: false

  test:
    desc: Run tests with coverage
    cmd: |
      gotestsum --format pkgname --jsonfile test-output.json --hide-summary=skipped -- -v -coverprofile=coverage.txt -covermode=atomic ./...

  test:race:
    desc: Run tests with race detection
    cmd: |
      gotestsum --format standard-verbose --jsonfile test-output.json -- -v -race ./...

  test:watch:
    desc: Run tests in watch mode
    cmd: |
      gotestsum --format pkgname --watch --hide-summary=skipped

  test:integration:
    desc: Run integration tests (disables cache with -count=1)
    cmd: |
      gotestsum --format pkgname -- -v -count=1 ./test/integration/...

  test:coverage:text:
    desc: Run tests with detailed coverage data and display uncovered parts in the terminal
    cmds:
      - gotestsum --format pkgname --jsonfile test-output.json --hide-summary=skipped -- -cover -coverprofile=coverage.txt -covermode=atomic ./...
      - echo "Detailed coverage report:"
      - go tool cover -func=coverage.txt
    silent: false

  test:coverage:html:
    desc: Generate HTML coverage report and open in browser
    cmds:
      - task: test
      - go tool cover -html=coverage.txt -o coverage.html
      - echo "Coverage report saved to coverage.html"
      - '{{if eq OS "darwin"}}open{{else if eq OS "windows"}}start{{else}}xdg-open{{end}} coverage.html'
    silent: true

  test:coverage:project:
    desc: Check project coverage meets threshold (like codecov/project)
    deps: [test]
    cmds:
      - ./scripts/check-coverage-project.sh

  test:coverage:patch:
    desc: Check patch coverage for changed lines (like codecov/patch)
    deps: [test]
    cmds:
      - ./scripts/check-coverage-patch.sh

  bench:
    desc: Run all benchmarks
    cmd: |
      go test -bench=. -benchmem ./... -run=^$ | tee bench-results.txt
      echo "Benchmark results saved to bench-results.txt"
    silent: false

  bench:cmd:
    desc: Run benchmarks for cmd package
    cmd: |
      go test -bench=. -benchmem ./cmd -run=^$

  bench:config:
    desc: Run benchmarks for config package
    cmd: |
      go test -bench=. -benchmem ./internal/config -run=^$

  bench:logger:
    desc: Run benchmarks for logger package
    cmd: |
      go test -bench=. -benchmem ./internal/logger -run=^$

  bench:compare:
    desc: Compare benchmark results (requires benchstat)
    cmds:
      - |
        if [ ! -f bench-old.txt ]; then
          echo "No baseline found. Run 'task bench' first and copy bench-results.txt to bench-old.txt"
          exit 1
        fi
      - task: bench
      - cp bench-results.txt bench-new.txt
      - benchstat bench-old.txt bench-new.txt

  generate:docs:config:
    desc: Generate configuration documentation
    cmds:
      - echo "Generating configuration documentation..."
      - mkdir -p docs
      - ./{{.BINARY_NAME}} docs config --output=docs/configuration.md
      - echo "Configuration documentation saved to docs/configuration.md"
    deps: [build]

  generate:config:template:
    desc: Generate YAML configuration template
    cmds:
      - echo "Generating YAML configuration template..."
      - mkdir -p docs
      - ./{{.BINARY_NAME}} docs config --format=yaml --output=docs/config-template.yaml
      - echo "YAML template saved to docs/config-template.yaml"
    deps: [build]

  generate:docs:
    desc: Generate all documentation
    cmds:
      - task: generate:docs:config
      - task: generate:config:template
    silent: true

  check:
    desc: Run all quality checks
    cmds:
      - task: check:format
      - task: lint
      - task: validate:defaults
      - task: validate:commands
      - task: validate:constants
      - task: check:deps
      - task: test

  build:
    desc: Build the binary
    cmds:
      - go build {{.LDFLAGS}} -o {{.BINARY_NAME}} main.go

  run:
    desc: Run the application
    deps: [build]
    cmds:
      - ./{{.BINARY_NAME}}

  install:
    desc: Install the application
    cmds:
      - go install {{.LDFLAGS}} ./...

  clean:local:
    desc: Clean local build artifacts
    cmds:
      - go clean
      - rm -f {{.BINARY_NAME}} coverage.txt test-output.json coverage.html

  clean:release:
    desc: Clean GoReleaser artifacts
    cmds:
      - rm -rf ./dist
      - echo "‚úÖ Cleaned release artifacts"

  clean:
    desc: Clean all artifacts
    cmds:
      - task: clean:local
      - task: clean:release

  generate:config:key-constants:
    desc: Generate type-safe config key constants
    cmds:
      - go run scripts/generate-config-constants.go
      - task: format

  generate:command:
    desc: Scaffold a new ultra-thin command with metadata and options
    vars:
      NAME: "{{.name}}"
      CMD_FILE: "cmd/{{.NAME}}.go"
      CFG_FILE: "internal/config/commands/{{.NAME}}_config.go"
    cmds:
      - |
        if [ -z "{{.NAME}}" ]; then
          echo "Usage: task generate:command name=<command_name>" >&2; exit 1; fi
      - |
        cp cmd/template_command.go.example {{.CMD_FILE}} && \
        sed -i '' "s/template/{{.NAME}}/g" {{.CMD_FILE}} && \
        sed -i '' "s/Template/{{.NAME | title}}/g" {{.CMD_FILE}}
      - |
        cp internal/config/commands/template_config.go.example {{.CFG_FILE}} && \
        sed -i '' "s/template/{{.NAME}}/g" {{.CFG_FILE}} && \
        sed -i '' "s/Template/{{.NAME | title}}/g" {{.CFG_FILE}}
      - echo "‚úÖ Scaffolded ultra-thin command"
      - echo "   Command {{.CMD_FILE}}"
      - echo "   Config {{.CFG_FILE}}"
      - echo ""
      - echo "Next steps"
      - echo "1. Create business logic in internal/{{.NAME}}/"
      - echo "2. Update metadata and options in {{.CFG_FILE}}"
      - echo "3. Update runTemplate function in {{.CMD_FILE}}"
      - echo "4. Run task validate:commands to verify pattern"

  check:release:
    desc: Check if GoReleaser is installed
    cmds:
      - |
        if ! command -v goreleaser &> /dev/null; then
          echo "‚ùå GoReleaser is not installed."
          echo ""
          echo "Install GoReleaser:"
          echo "  macOS:   brew install goreleaser"
          echo "  Linux:   https://goreleaser.com/install/"
          echo "  Go:      go install github.com/goreleaser/goreleaser@latest"
          exit 1
        fi
        echo "‚úÖ GoReleaser is installed: $(goreleaser --version)"
    silent: false

  test:release:
    desc: Test GoReleaser configuration (snapshot build, no release)
    deps: [check:release]
    cmds:
      - echo "Building snapshot release (no tags required)..."
      - goreleaser release --snapshot --clean --skip=publish
      - echo ""
      - echo "‚úÖ Snapshot build successful!"
      - echo "Artifacts are in ./dist/"
      - echo ""
      - echo "To test the binaries (Linux, macOS, Windows)"
    silent: false

  build:release:
    desc: Build release artifacts locally (requires git tag)
    deps: [check:release]
    cmds:
      - echo "Building release artifacts..."
      - goreleaser build --clean --snapshot
      - echo ""
      - echo "‚úÖ Build successful!"
      - echo "   Binaries are in ./dist/"
