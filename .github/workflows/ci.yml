name: CI and Release Workflow

on:
  push:
    branches:
      - main
    tags:
      - "*" # Trigger for all tags

  pull_request:
    branches:
      - main

# Concurrency controls to prevent wasting CI minutes
# Cancel in-progress runs for PRs, but let main branch builds complete
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  GO_VERSION: '1.25.x'       # Define Go version here
  YQ_VERSION: '4.34.1'       # Define yq version here
  TASK_VERSION: '3.39.2'     # Define Task version here

jobs:
  # Matrix testing across multiple OS and Go versions
  test-matrix:
    name: Test on ${{ matrix.os }} with Go ${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24.x', '1.25.x']

    permissions:
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Download Dependencies
        run: go mod download

      - name: Build
        run: go build -v ./...

      - name: Run Tests (Unix)
        if: runner.os != 'Windows'
        run: go test -v -race ./...

      - name: Run Tests (Windows)
        if: runner.os == 'Windows'
        run: go test -v ./...

  # Main build job with full quality checks (Linux only)
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Only need read access for checkout and build
      pull-requests: write # Needed for codecov comment
      checks: write # Needed for test result reporting

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Task Binary
        id: cache-task
        uses: actions/cache@v4
        with:
          path: ~/.local/bin/task
          key: ${{ runner.os }}-task-${{ env.TASK_VERSION }}

      - name: Install Task
        if: steps.cache-task.outputs.cache-hit != 'true'
        run: |
          INSTALL_DIR="$HOME/.local/bin"
          TASK_INSTALL_SCRIPT_URL="https://taskfile.dev/install.sh"
          mkdir -p "$INSTALL_DIR"
          curl -sL "$TASK_INSTALL_SCRIPT_URL" | sh -s -- -b "$INSTALL_DIR" v${{ env.TASK_VERSION }}
          echo "$INSTALL_DIR" >> "$GITHUB_PATH"
        shell: bash

      - name: Add Task to PATH
        run: echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Display Task Version
        run: task --version

      - name: Install Project Dependencies
        run: task setup

      - name: Run Quality Checks
        run: task check

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        if: env.CODECOV_TOKEN != ''
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ./coverage.txt
          fail_ci_if_error: true
          verbose: true
          flags: unittests
          name: codecov-ckeletin-go

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') # Only run on tags
    needs: [test-matrix, build] # Ensure all tests pass before release
    permissions:
      contents: write # Need write access to create releases
      packages: read # For package access if needed

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # GoReleaser needs full git history

      - name: Validate SEMVER Tag
        id: validate_tag
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          # Safely handle the tag name
          echo "tag_name=${TAG_NAME}" >> "$GITHUB_ENV"
          if [[ ! "$TAG_NAME" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-([a-zA-Z0-9.-]+))?(\+([a-zA-Z0-9.-]+))?$ ]]; then
            echo "❌ Invalid SEMVER tag: $TAG_NAME"
            exit 1
          fi
          echo "✅ Valid SEMVER tag: $TAG_NAME"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Syft for SBOM generation
        uses: anchore/sbom-action/download-syft@v0.20.9

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.CKELETIN_GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
