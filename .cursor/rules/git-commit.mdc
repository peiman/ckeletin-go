---
description: Git Commit Conventions
globs: 
alwaysApply: false
---
# Git Commit Conventions

## Commit Format
All commits must follow this exact format:
```
<type>: <concise summary>

- <bullet point details>
- <additional details>
```

## Commit Types
Where type must be one of:
- **feat**: New features
- **fix**: Bug fixes
- **docs**: Documentation changes
- **test**: Test additions or modifications
- **refactor**: Non-feature, non-bug code changes
- **style**: Formatting changes
- **ci**: CI configuration changes
- **build**: Build system changes
- **deps**: Dependency updates

## Multiple Types
For multiple types, separate with empty lines:
```
feat: add new feature

- Feature implementation details

docs: update documentation

- Documentation details
```

## Commit Preparation
Before creating any commit, you MUST:
1. Run `task check` to verify all tests pass, linting is clean, and dependencies are verified
2. Fix any failing tests or linting issues
3. Make sure coverage targets are met (minimum 80% overall)
4. Be sure that committed changes don't introduce regressions

## Commit Message Creation
When creating a commit message, format it as as a text blob and let the user do the commit:
```
git commit -m"refactor: improve binary name handling

- Updated completion command to use binaryName variable
- Added clear documentation about BINARY_NAME in Taskfile.yml
- Added explanatory comments in .gitignore"
```

!!!!DO NOT RUN THE GIT COMMIT COMMAND YOURSELF!!!!!